# Define a function to normalize heights for a single LAS file
process_lidar_file <- function(las_file, output_folder) {
# Read the LAS file
########################## combine shape file###########
las <- readLAS(las_file)
# Perform processing without creating large objects in the global environment
chm <- rasterize_canopy(las, res = 1, algorithm = p2r(subcircle = 0.2))
ttops <- locate_trees(las, lmf(ws=15))
algo <- dalponte2016(chm, ttops)
las <- segment_trees(las, algo)
crowns <- crown_metrics(las, func = .stdmetrics, geom = "convex")
crowns_df <- data.frame(crowns) # Convert to a data.frame
# Extract the index from the LAS file name
las_index <- sub(".las", "", basename(las_file))
# Construct the output file path with the index
output_file <- file.path(output_folder, paste0("Tree_", las_index, ".shp"))
st_write(crowns, output_file, row.names=FALSE)
}
# Set up parallel processing with future
plan(multisession, workers = num_cores)
# Use future_lapply to process LAS files and save results in parallel
future_lapply(ctg$filename, function(las_file) {
process_lidar_file(las_file, output_folder)
})
rm(list=ls(all=TRUE))
library(rgdal)
library(raster)
library(rgeos)
library(lidR)
library(mapview)
library(sf)
# Set the number of cores to use
num_cores <- 8
# Define the LAS catalog
ctg <- readLAScatalog("S:\\Lassen_data\\Sonora\\data-transfer\\Normal")
# Set the output folder for normalized LAS files
output_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Shapefile"
# Define a function to normalize heights for a single LAS file
process_lidar_file <- function(las_file, output_folder) {
# Read the LAS file
########################## combine shape file###########
las <- readLAS(las_file)
# Perform processing without creating large objects in the global environment
chm <- rasterize_canopy(las, res = 1, algorithm = p2r(subcircle = 0.2))
ttops <- locate_trees(las, lmf(ws=15))
algo <- dalponte2016(chm, ttops)
las <- segment_trees(las, algo)
crowns <- crown_metrics(las, func = .stdmetrics, geom = "convex")
crowns_df <- data.frame(crowns) # Convert to a data.frame
# Extract the index from the LAS file name
las_index <- sub(".las", "", basename(las_file))
# Construct the output file path with the index
output_file <- file.path(output_folder, paste0("Tree_", las_index, ".shp"))
st_write(crowns, output_file, row.names=FALSE)
}
# Set up parallel processing with future
plan(multisession, workers = num_cores)
# Use future_lapply to process LAS files and save results in parallel
future_lapply(ctg$filename, function(las_file) {
process_lidar_file(las_file, output_folder)
})
# Define the source folder
source_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Normal"
# Create the destination folder (change the path accordingly)
destination_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Remaining"
# Create the destination folder if it doesn't exist
if (!dir.exists(destination_folder)) {
dir.create(destination_folder)
}
# List all files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Filter the files based on naming criteria (i >= 1099)
filtered_files <- grep("^Filter_Plot_\\[(\\d+)\\]", files, value = TRUE)
filtered_files <- filtered_files[as.numeric(gsub("^Filter_Plot_\\[(\\d+)\\]", "\\1", filtered_files)) >= 1099]
# Move the selected files to the destination folder
for (file in filtered_files) {
new_file <- file.path(destination_folder, basename(file))
file.copy(file, new_file)  # Use file.rename() if you want to move (rename) the file
}
# Optionally, print the list of selected files that were moved
cat("Moved Files:\n", filtered_files, "\n")
# Define the source folder
source_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Normal"
# Create the destination folder (change the path accordingly)
destination_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Remaining"
# Create the destination folder if it doesn't exist
if (!dir.exists(destination_folder)) {
dir.create(destination_folder)
}
# List all files in the source folder
files <- list.files(source_folder, full.names = TRUE)
files
# Filter the files based on naming criteria (i >= 1099)
filtered_files <- grep("^Filter_Plot_\\[(\\d+)\\]", files, value = TRUE)
filtered_files
# List all files in the source folder
files <- list.files(source_folder, full.names = TRUE,pattern=".las")
files
# List all files in the source folder
files <- list.files(source_folder, full.names = TRUE)
files
# Filter the files based on naming criteria (i > 1099)
filtered_files <- files[grep("^Filter_plot_([0-9]+)\\.las$", files)]
filtered_files <- filtered_files[as.numeric(gsub("^Filter_plot_([0-9]+)\\.las$", "\\1", filtered_files)) > 1099]
# Move the selected files to the destination folder
for (file in filtered_files) {
new_file <- file.path(destination_folder, basename(file))
file.rename(file, new_file)
}
# Optionally, print the list of selected files that were moved
cat("Moved Files:\n", filtered_files, "\n")
# Define the source folder
source_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Normal"
# Create the destination folder (change the path accordingly)
destination_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Remaining"
# Create the destination folder if it doesn't exist
if (!dir.exists(destination_folder)) {
dir.create(destination_folder)
}
# List all files in the source folder
files <- list.files(source_folder, full.names = TRUE)
files
# Filter the files based on naming criteria (i > 1099)
filtered_files <- files[grep("^Filter_Plot_([0-9]+)\\.las$", files)]
filtered_files <- filtered_files[as.numeric(gsub("^Filter_Plot_([0-9]+)\\.las$", "\\1", filtered_files)) > 1099]
# Move the selected files to the destination folder
for (file in filtered_files) {
new_file <- file.path(destination_folder, basename(file))
file.rename(file, new_file)
}
# Optionally, print the list of selected files that were moved
cat("Moved Files:\n", filtered_files, "\n")
# Define the source folder
source_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Normal"
# Create the destination folder (change the path accordingly)
destination_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Remaining"
# Create the destination folder if it doesn't exist
if (!dir.exists(destination_folder)) {
dir.create(destination_folder)
}
# List all files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Create the destination folder if it doesn't exist
if (!dir.exists(destination_folder)) {
dir.create(destination_folder)
}
# List all files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Filter the files based on naming criteria (i > 1099)
filtered_files <- files[grep("^Filter_Plot_(\\d+)\\.las$", basename(files))]
filtered_files <- filtered_files[as.numeric(gsub("^Filter_Plot_(\\d+)\\.las$", "\\1", basename(filtered_files))) > 1099]
# Move the selected files to the destination folder
for (file in filtered_files) {
new_file <- file.path(destination_folder, basename(file))
file.rename(file, new_file)
}
rm(list=ls(all=TRUE))
library(rgdal)
library(raster)
library(rgeos)
library(future)
library(future.apply)
# Load required libraries
library(lidR)
# Set the number of cores to use
num_cores <- 8
# Define the LAS catalog
ctg <- readLAScatalog("S:\\Lassen_data\\Sonora\\data-transfer\\Remaining")
# Set the output folder for normalized LAS files
output_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Shapefile"
# Define a function to normalize heights for a single LAS file
process_lidar_file <- function(las_file, output_folder) {
# Read the LAS file
########################## combine shape file###########
las <- readLAS(las_file)
# Perform processing without creating large objects in the global environment
chm <- rasterize_canopy(las, res = 1, algorithm = p2r(subcircle = 0.2))
ttops <- locate_trees(las, lmf(ws=15))
algo <- dalponte2016(chm, ttops)
las <- segment_trees(las, algo)
crowns <- crown_metrics(las, func = .stdmetrics, geom = "convex")
crowns_df <- data.frame(crowns) # Convert to a data.frame
# Extract the index from the LAS file name
las_index <- sub(".las", "", basename(las_file))
# Construct the output file path with the index
output_file <- file.path(output_folder, paste0("Tree_", las_index, ".shp"))
st_write(crowns, output_file, row.names=FALSE)
}
# Set up parallel processing with future
plan(multisession, workers = num_cores)
# Use future_lapply to process LAS files and save results in parallel
future_lapply(ctg$filename, function(las_file) {
process_lidar_file(las_file, output_folder)
})
rm(list=ls(all=TRUE))
library(rgdal)
library(raster)
library(rgeos)
library(lidR)
library(future)
library(future.apply)
# Set the number of cores to use
num_cores <- 8
# Define the LAS catalog
ctg <- readLAScatalog("S:\\Lassen_data\\Sonora\\data-transfer\\Remaining")
# Set the output folder for normalized LAS files
output_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Shapefile"
# Define a function to normalize heights for a single LAS file
process_lidar_file <- function(las_file, output_folder) {
# Read the LAS file
########################## combine shape file###########
las <- readLAS(las_file)
# Perform processing without creating large objects in the global environment
chm <- rasterize_canopy(las, res = 1, algorithm = p2r(subcircle = 0.2))
ttops <- locate_trees(las, lmf(ws=15))
algo <- dalponte2016(chm, ttops)
las <- segment_trees(las, algo)
crowns <- crown_metrics(las, func = .stdmetrics, geom = "convex")
crowns_df <- data.frame(crowns) # Convert to a data.frame
# Extract the index from the LAS file name
las_index <- sub(".las", "", basename(las_file))
# Construct the output file path with the index
output_file <- file.path(output_folder, paste0("Tree_", las_index, ".shp"))
st_write(crowns, output_file, row.names=FALSE)
}
# Set up parallel processing with future
plan(multisession, workers = num_cores)
# Use future_lapply to process LAS files and save results in parallel
future_lapply(ctg$filename, function(las_file) {
process_lidar_file(las_file, output_folder)
})
library(sp)
library(sf)
# Set the number of cores to use
num_cores <- 8
# Define the LAS catalog
ctg <- readLAScatalog("S:\\Lassen_data\\Sonora\\data-transfer\\Remaining")
# Set the output folder for normalized LAS files
output_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Shapefile"
# Define a function to normalize heights for a single LAS file
process_lidar_file <- function(las_file, output_folder) {
# Read the LAS file
########################## combine shape file###########
las <- readLAS(las_file)
# Perform processing without creating large objects in the global environment
chm <- rasterize_canopy(las, res = 1, algorithm = p2r(subcircle = 0.2))
ttops <- locate_trees(las, lmf(ws=15))
algo <- dalponte2016(chm, ttops)
las <- segment_trees(las, algo)
crowns <- crown_metrics(las, func = .stdmetrics, geom = "convex")
crowns_df <- data.frame(crowns) # Convert to a data.frame
# Extract the index from the LAS file name
las_index <- sub(".las", "", basename(las_file))
# Construct the output file path with the index
output_file <- file.path(output_folder, paste0("Tree_", las_index, ".shp"))
st_write(crowns, output_file, row.names=FALSE)
}
# Set up parallel processing with future
plan(multisession, workers = num_cores)
# Use future_lapply to process LAS files and save results in parallel
future_lapply(ctg$filename, function(las_file) {
process_lidar_file(las_file, output_folder)
})
# Define the source folder
source_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Remaining"
# Create the destination folder (change the path accordingly)
destination_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Remaining1"
# Create the destination folder if it doesn't exist
if (!dir.exists(destination_folder)) {
dir.create(destination_folder)
}
# List all files in the source folder
files <- list.files(source_folder, full.names = TRUE)
# Filter the files based on naming criteria (i > 1099)
filtered_files <- files[grep("^Filter_Plot_(\\d+)\\.las$", basename(files))]
filtered_files <- filtered_files[as.numeric(gsub("^Filter_Plot_(\\d+)\\.las$", "\\1", basename(filtered_files))) >= 1185]
# Move the selected files to the destination folder
for (file in filtered_files) {
new_file <- file.path(destination_folder, basename(file))
file.rename(file, new_file)
}
# Optionally, print the list of selected files that were moved
cat("Moved Files:\n", filtered_files, "\n")
# Set the number of cores to use
num_cores <- 8
# Define the LAS catalog
ctg <- readLAScatalog("S:\\Lassen_data\\Sonora\\data-transfer\\Remaining1")
# Set the output folder for normalized LAS files
output_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Shapefile"
# Define a function to normalize heights for a single LAS file
process_lidar_file <- function(las_file, output_folder) {
# Read the LAS file
########################## combine shape file###########
las <- readLAS(las_file)
# Perform processing without creating large objects in the global environment
chm <- rasterize_canopy(las, res = 1, algorithm = p2r(subcircle = 0.2))
ttops <- locate_trees(las, lmf(ws=15))
algo <- dalponte2016(chm, ttops)
las <- segment_trees(las, algo)
crowns <- crown_metrics(las, func = .stdmetrics, geom = "convex")
crowns_df <- data.frame(crowns) # Convert to a data.frame
# Extract the index from the LAS file name
las_index <- sub(".las", "", basename(las_file))
# Construct the output file path with the index
output_file <- file.path(output_folder, paste0("Tree_", las_index, ".shp"))
st_write(crowns, output_file, row.names=FALSE,overwrite = TRUE)
}
# Set up parallel processing with future
plan(multisession, workers = num_cores)
# Use future_lapply to process LAS files and save results in parallel
future_lapply(ctg$filename, function(las_file) {
process_lidar_file(las_file, output_folder)
})
# Set the number of cores to use
num_cores <- 8
# Define the LAS catalog
ctg <- readLAScatalog("S:\\Lassen_data\\Sonora\\data-transfer\\Remaining1")
# Set the output folder for normalized LAS files
output_folder <- "S:\\Lassen_data\\Sonora\\data-transfer\\Shapefile"
# Define a function to normalize heights for a single LAS file
process_lidar_file <- function(las_file, output_folder) {
# Read the LAS file
########################## combine shape file###########
las <- readLAS(las_file)
# Perform processing without creating large objects in the global environment
chm <- rasterize_canopy(las, res = 1, algorithm = p2r(subcircle = 0.2))
ttops <- locate_trees(las, lmf(ws=15))
algo <- dalponte2016(chm, ttops)
las <- segment_trees(las, algo)
crowns <- crown_metrics(las, func = .stdmetrics, geom = "convex")
crowns_df <- data.frame(crowns) # Convert to a data.frame
# Extract the index from the LAS file name
las_index <- sub(".las", "", basename(las_file))
# Construct the output file path with the index
output_file <- file.path(output_folder, paste0("Tree_", las_index, ".shp"))
st_write(crowns, output_file, row.names=FALSE,append=FALSE)
}
# Set up parallel processing with future
plan(multisession, workers = num_cores)
# Use future_lapply to process LAS files and save results in parallel
future_lapply(ctg$filename, function(las_file) {
process_lidar_file(las_file, output_folder)
})
height<-55.8
age<-46
b1 <- 1.221
b2 <- -0.8755
b3 <- 402.8
R <- ((((age)^b1)/(height-4.5))-b2)/(b3+(age)^b1)
#Y <- log(1 - exp(b1 * data_df$Age[i]))
# R <- (((L - b2 * Y)) + sqrt((L - (b2 * Y))^2 - 4 * b3 * Y)) / 2
SI<- 4.5+((50^b1)/(b2+(b3*R)+(R*50)^b1))
SI
R
b1 <- 1.741
b2 <- -110.3
b3 <- 20100
R <- ((((age)^b1)/(height-4.5))-b2)/(b3+(age)^b1)
R
#Y <- log(1 - exp(b1 * data_df$Age[i]))
# R <- (((L - b2 * Y)) + sqrt((L - (b2 * Y))^2 - 4 * b3 * Y)) / 2
SI<- 4.5+((50^b1)/(b2+(b3*R)+(R*50)^b1))
SI
shiny::runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/Draw')
install.packages("base64enc")
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
library(rstac)
install.packages("rstac")
install.packages("magrittr")
install.packages("terra")
library(rstac)
library(magrittr)
library(terra)
s_obj <- stac("https://planetarycomputer.microsoft.com/api/stac/v1/")
it_obj <- s_obj %>%
stac_search(collections = "naip",
bbox = c(-47.02148, -17.35063, -42.53906, -12.98314)) %>%
get_request()
print(it_obj)
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
library(rstac)
library(magrittr)
library(terra)
s_obj <- stac("https://planetarycomputer.microsoft.com/api/stac/v1/")
it_obj <- s_obj %>%
stac_search(collections = "landsat-c2-l2",
bbox = c(-47.02148, -17.35063, -42.53906, -12.98314)) %>%
get_request()
print(it_obj)
it_obj <- s_obj %>%
stac_search(collections = "landsat-c2-l2",
bbox = c(-47.02148, -17.35063, -42.53906, -12.98314)) %>%
get_request() %>%
items_sign(sign_fn = sign_planetary_computer())
url <- paste0("/vsicurl/", it_obj$features[[1]]$assets$blue$href)
data <- rast(url)
plot(data)
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
shiny::runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
runApp('D:/NDVI_APP/NDVI')
shiny::runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
runApp('D:/NDVI_APP/Draw')
